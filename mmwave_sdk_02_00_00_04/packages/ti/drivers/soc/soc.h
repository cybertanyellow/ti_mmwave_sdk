/**
 *   @file  soc.h
 *
 *   @brief
 *      This is the header file for the SOC driver which exposes the
 *      data structures and exported API which can be used by the
 *      applications to use the SOC driver.
 *
 *  \par
 *  NOTE:
 *      (C) Copyright 2016 Texas Instruments, Inc.
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions
 *  are met:
 *
 *    Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 *    Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the
 *    distribution.
 *
 *    Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 *  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 *  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 *  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 *  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 *  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 *  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 *  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 *  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/** @mainpage SOC Driver
 *
 *  The SOC Driver allows the application developers to use the following
 *  sub-modules:
 *  - MSS RCM
 *  - MSS TOP RCM
 *  - DSS
 *
 *  The SOC header file should be included in an application as follows:
 *  @code
    #include <ti/drivers/soc.h>
    @endcode
 *
 *  ## Initializing the driver #
 *  The SOC Driver needs to be initialized once across the System. This is
 *  done using the #SOC_init. None of the SOC API can be used without invoking
 *  this API
 *
 *  ## Register Layer #
 *  Refer to the soc/include directory for the register layers definitons for
 *  the following modules:
 *      RCM     : soc/include/reg_rcm.h
 *      TOP RCM : soc/include/reg_toprcm.h
 *      DSS     : soc/include/reg_dssreg.h
 */

/** @defgroup SOC_DRIVER      SOC Driver
 */
#ifndef SOC_DRIVER_H
#define SOC_DRIVER_H

#include <ti/common/mmwave_error.h>
#include <ti/drivers/osal/HwiP.h>

#ifdef SOC_XWR14XX
#include <ti/drivers/soc/include/soc_xwr14xx.h>
#endif

#ifdef SOC_XWR16XX
#include <ti/drivers/soc/include/soc_xwr16xx.h>
#endif

/**
@defgroup SOC_DRIVER_EXTERNAL_FUNCTION            SOC Driver External Functions
@ingroup SOC_DRIVER
@brief
*   The section has a list of all the exported API which the applications need to
*   invoke in order to use the driver
*/
/**
@defgroup SOC_DRIVER_EXTERNAL_DATA_STRUCTURE      SOC Driver External Data Structures
@ingroup SOC_DRIVER
@brief
*   The section has a list of all the data structures which are exposed to the application
*/
/**
@defgroup SOC_DRIVER_ERROR_CODE                   SOC Driver Error Codes
@ingroup SOC_DRIVER
@brief
*   The section has a list of all the error codes which are generated by the CRC Driver
*   module
*/
/**
@defgroup SOC_DRIVER_INTERNAL_FUNCTION            SOC Driver Internal Functions
@ingroup SOC_DRIVER
@brief
*   The section has a list of all internal API which are not exposed to the external
*   applications.
*/
/**
@defgroup SOC_DRIVER_INTERNAL_DATA_STRUCTURE      SOC Driver Internal Data Structures
@ingroup SOC_DRIVER
@brief
*   The section has a list of all internal data structures which are used internally
*   by the SOC module.
*/
/**
@defgroup SOC_DRIVER_INTERNAL_DEFINITION      SOC Driver Internal Definitions
@ingroup SOC_DRIVER
@brief
*   The section has a list of all internal definitions which are used internally
*   by the SOC module.
*/

#ifdef __cplusplus
extern "C" {
#endif

/** @addtogroup SOC_DRIVER_ERROR_CODE
 *  Base error code for the SOC module is defined in the
 *  \include ti/common/mmwave_error.h
 @{ */

/**
 * @brief   Error Code: Invalid argument
 */
#define SOC_EINVAL                  (MMWAVE_ERRNO_SOC_BASE-1)

/**
 * @brief   Error Code: Out of memory
 */
#define SOC_ENOMEM                  (MMWAVE_ERRNO_SOC_BASE-2)

/**
 * @brief   Error Code: Internal error
 */
#define SOC_EINTERNAL               (MMWAVE_ERRNO_SOC_BASE-3)

/**
 * @brief   Error Code: Limits have been exceeded.
 */
#define SOC_ENOSPACE                (MMWAVE_ERRNO_SOC_BASE-4)

/**
 * @brief   Error Code: SOC_translateAddress couldn't translate the provided address
 *          This value is chosen since all other values can map to a valid address in 
 *          some domain.
 */
#define SOC_TRANSLATEADDR_INVALID    (0xFFFFFFFFU)


/**
@}
*/

/** @addtogroup SOC_DRIVER_EXTERNAL_DATA_STRUCTURE
 @{ */

/**
 * @brief
 *  SOC Driver Handle
 */
typedef void*   SOC_Handle;

/**
 * @brief
 *  SOC System Interrupt Listener Handle
 */
typedef void*   SOC_SysIntListenerHandle;

/**
 * @brief
 *  SOC System Interrupt Listener Function
 */
typedef void (*SOC_SysIntListenerFxn)(uintptr_t arg);

/**
 * @brief
 *  Enumeration for system clocks
 *
 * @details
 *  The enumeration describes the configuration of the system clock.
 *  - On the MSS in the XWR14xx; the System clocks need to be initialized
 *    and setup during SOC Initialization.
 *  - On the XWR16xx; either the MSS *OR* DSS can perform clock initialization
 *    Application developers need to determine upfront the system responsible
 *    for doing so.
 */
typedef enum SOC_SysClock_e
{
    /**
     * @brief
     *  System Clocks need to be initialized
     */
    SOC_SysClock_INIT           = 0x1,

    /**
     * @brief
     *  System Clocks initialization is bypassed
     */
    SOC_SysClock_BYPASS_INIT
}SOC_SysClock;

/**
 * @brief
 *  Enumeration for address translation from one domain to the other
 *
 * @details
 *  The enumeration describes the direction of address translation.
 */
typedef enum SOC_TranslateAddr_Dir_e
{
    /**
     * @brief
     *  CPU to EDMA address translation
     */
    SOC_TranslateAddr_Dir_TO_EDMA,

    /**
     * @brief
     *  EDMA to CPU address translation
     */
    SOC_TranslateAddr_Dir_FROM_EDMA,

#ifdef SOC_XWR16XX
    /**
     * @brief
     *  Cross CPU address translation (XWR16xx only - MSS to DSS or DSS to MSS)
     *    From the running core to the other core
     */
    SOC_TranslateAddr_Dir_TO_OTHER_CPU,

    /**
     * @brief
     *  Cross CPU address translation (XWR16xx only - MSS to DSS or DSS to MSS)
     *    From the other core to the running core
     */
    SOC_TranslateAddr_Dir_FROM_OTHER_CPU
#endif
}SOC_TranslateAddr_Dir;

/**
 * @brief
 *  SOC RCM Module clock Source
 *
 * @details
 *  The enumeration defines the module clock source supported by XWR1xxx device.
 */
typedef enum SOC_PeripheralClkSource_e
{
    /*! VCLK */
    SOC_CLKSOURCE_VCLK = 0U,

    /*! RCCLK */
    SOC_CLKSOURCE_RCCLK = 1U,

    /*! 600MPLL */
    SOC_CLKSOURCE_600MPLL = 2U,

    /*! 240MPLL */
    SOC_CLKSOURCE_240MPLL = 3U,

    /*! CPUCLK */
    SOC_CLKSOURCE_CPUCLK = 4U,

    /*! REFCLK */
    SOC_CLKSOURCE_REFCLK = 6U
}SOC_PeripheralClkSource;

/**
 * @brief
 *  SOC Configuration
 *
 * @details
 *  The structure describes the configuration information which is needed
 *  to open and initialize the SOC Driver.
 */
typedef struct SOC_Cfg_t
{
    /**
     * @brief
     *  System clock configuration
     */
    SOC_SysClock        clockCfg;
}SOC_Cfg;

/**
 * @brief
 *  SOC Interrupt Listener Configuration
 *
 * @details
 *  The structure describes the configuration information which is need to initialize
 *  the system interrupt listener
 */
typedef struct SOC_SysIntListenerCfg_t
{
    /**
     * @brief
     *  System interrupt on which the listener is to be registered
     */
    uint32_t                systemInterrupt;

    /**
     * @brief
     *  Listener Function to be registered
     */
    SOC_SysIntListenerFxn   listenerFxn;

    /**
     * @brief
     *  Optional argument with which the listener function is to be invoked on
     *  an ISR
     */
    uintptr_t               arg;
}SOC_SysIntListenerCfg;


/**
@}
*/

/*******************************************************************************************************
 * SOC Driver Exported API:
 *******************************************************************************************************/

extern SOC_Handle SOC_init(SOC_Cfg* ptrCfg, int32_t* errCode);
extern int32_t SOC_unhaltBSS(SOC_Handle handle, int32_t* errCode);
extern int32_t SOC_haltBSS(SOC_Handle handle, int32_t* errCode);
extern int32_t SOC_enableLVDS(SOC_Handle handle, int32_t* errCode);
extern int32_t SOC_SPIOutputCtrl (SOC_Handle handle, uint8_t spiInst, uint8_t enable, int32_t* errCode);
extern int32_t SOC_waitBSSPowerUp(SOC_Handle handle, int32_t* errCode);
extern int32_t SOC_deinit(SOC_Handle handle, int32_t* errCode);
extern SOC_SysIntListenerHandle SOC_registerSysIntListener(SOC_Handle handle, SOC_SysIntListenerCfg* ptrListenerCfg, int32_t* errCode);
extern int32_t SOC_deregisterSysIntListener(SOC_Handle handle, uint32_t systemInterrupt, SOC_SysIntListenerHandle listenerHandle, int32_t* errCode);
extern uint32_t SOC_translateAddress(uint32_t inAddr, SOC_TranslateAddr_Dir direction, int32_t* errCode);
extern int32_t SOC_setPeripheralClock(   SOC_Handle handle, SOC_ModuleId module, SOC_PeripheralClkSource clkSource, uint8_t clkDivisor, int32_t* errCode);
extern int32_t SOC_initPeripheralRam(SOC_Handle handle, SOC_ModuleId module, int32_t* errCode);
extern void SOC_microDelay (uint32_t delayInMircoSecs);
extern int32_t SOC_triggerWarmReset(SOC_Handle handle, int32_t* errCode);
extern int32_t SOC_enableWatchdog(SOC_Handle handle, int32_t* errCode);

#ifdef SOC_XWR14XX
extern int32_t SOC_enableHWA(SOC_Handle handle, int32_t* errCode);
extern int32_t SOC_enableCSI(SOC_Handle handle, int32_t* errCode);
#endif

#ifdef SOC_XWR16XX
/* These functions are exported for use by the mmWave module. */
extern int32_t SOC_isMMWaveMSSOperational(SOC_Handle handle, int32_t* errCode);
extern int32_t SOC_setMMWaveMSSLinkState(SOC_Handle handle, uint8_t state, int32_t* errCode);
extern int32_t SOC_isMMWaveDSSOperational(SOC_Handle handle, int32_t* errCode);
extern int32_t SOC_setMMWaveDSSLinkState(SOC_Handle handle, uint8_t state, int32_t* errCode);

extern int32_t SOC_setMSSLinkState(SOC_Handle handle, uint8_t state, int32_t* errCode);
extern int32_t SOC_isMSSOperational(SOC_Handle handle, int32_t* errCode);
extern int32_t SOC_setDSSLinkState(SOC_Handle handle, uint8_t state, int32_t* errCode);
extern int32_t SOC_isDSSOperational(SOC_Handle handle, int32_t* errCode);

extern int32_t SOC_isSecureDevice(SOC_Handle handle, int32_t* errCode);
extern int32_t SOC_controlSecureFirewall(SOC_Handle handle, uint32_t firewallModulesBitmap, uint8_t control, int32_t* errCode);

#ifdef SUBSYS_DSS
extern int32_t SOC_triggerDSStoMSSsoftwareInterrupt(SOC_Handle handle,
    uint8_t interruptNumber, int32_t* errCode);
extern int32_t SOC_configureDSSESMMask(SOC_Handle handle, uint8_t errorNumber, uint8_t mask, int32_t *errCode);
#endif
#endif

#ifdef __cplusplus
}
#endif

#endif /* SOC_DRIVER_H */

