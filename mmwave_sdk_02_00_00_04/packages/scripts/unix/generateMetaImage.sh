#!/bin/bash
#
#
# Prerequiste: Ensure that the MMWAVE_SDK_INSTALL_PATH has been setup properly before calling
# the script.
#
#
# ================================================
# generateMetaImage.sh <FLASHIMAGE> <SHMEM_ALLOC> <MSS_IMAGE_BIN> <BSS_IMAGE_BIN> <DSS_IMAGE_BIN>
# 		where
# 			FLASHIMAGE: 	[output] multicore file that will be generated by this script and should be used for flashing onto the board
#			SHMEM_ALLOC: 	[input]  shared memory allocation in 32-bit hex format where each byte (left to right) is for BSS,TCMB,TCMA,DSS
#			MSS_IMAGE: 	[input]  MSS input image in RPRC (,bin) format , use keyword NULL if not needed
#			BSS_IMAGE: 	[input]  BSS input image in RPRC (,bin) format, use keyword NULL if not needed
#			DSS_IMAGE: 	[input]  DSP input image, use keyword NULL if not needed
#
#		example:
#			generateMetaImage.sh metaImage.bin 0x01000005 xwr16xx_mmw_demo_mss.bin xwr1xxx_bss.bin xwr16xx_mmw_demo_dss.bin
# ================================================

########################################################################################
# Utility function which is used to print an error message on the build console
########################################################################################
function printErrorMsg ()
{
  echo -e "\033[31m"${1}${2}
  echo -e -n "\033[0m"
}


# ================================================
# argument checking and parsing
if [ -z $MMWAVE_SDK_INSTALL_PATH ]; then
    printErrorMsg "Error: MMWAVE_SDK_INSTALL_PATH [mmWave SDK Package Location] needs to be defined"    
    return 1
fi
if [ $# -lt 3 ]; then
    printErrorMsg "Error: Invalid Usage"
    printErrorMsg "        generateMetaImage.sh <FLASHIMAGE> <SHMEM_ALLOC> <MSS_IMAGE_BIN> <BSS_IMAGE_BIN> <DSS_IMAGE_BIN>"
    return 1
fi

FLASHIMAGE=$1
SHMEM_ALLOC=$2
MSS_IMAGE_BIN=$3
BSS_IMAGE_BIN=$4
DSS_IMAGE_BIN=$5

# ================================================

# ================================================
# tools required

if [ "$MMWAVE_SDK_DEVICE" == "awr14xx" ] || [ "$MMWAVE_SDK_DEVICE" == "iwr14xx" ]
then
    ImageCreatorDevice=xwr14xx
else
    ImageCreatorDevice=xwr16xx
fi

MULTCOREGEN=$MMWAVE_SDK_INSTALL_PATH/scripts/ImageCreator/$ImageCreatorDevice/multicore_image_generator/MulticoreImageGen
CRC_MULTI=$MMWAVE_SDK_INSTALL_PATH/scripts/ImageCreator/$ImageCreatorDevice/crc_multicore_image/crc_multicore_image
GEN_BINCRC32=$MMWAVE_SDK_INSTALL_PATH/scripts/ImageCreator/append_bin_crc/gen_bincrc32
TEMP_FILE=$FLASHIMAGE.tmp
# ================================================

# ================================================
# setup arguments for MulticoreImageGen
if [ -e "$MSS_IMAGE_BIN" ]
then
	MSS_CORE="0x35510000 $MSS_IMAGE_BIN"
else
	MSS_CORE=
fi
if [ -e "$BSS_IMAGE_BIN" ]
then
	BSS_CORE="0xb5510000 $BSS_IMAGE_BIN"
else
	BSS_CORE=
fi
if [ -e "$DSS_IMAGE_BIN" ]
then
	DSS_CORE="0xd5510000 $DSS_IMAGE_BIN"
else
	DSS_CORE=
fi
# ================================================

# ================================================
# 
# generate the multicore image
# format:  MulticoreImageGen.exe <LE/BE> <DEV_ID> <SHMEM_ALLOC> <OUTPUT FILE> <COREID> <IMAGE1> <COREID> <IMAGE2> ..
echo $MULTCOREGEN LE 37 $SHMEM_ALLOC $FLASHIMAGE $MSS_CORE $BSS_CORE $DSS_CORE
$MULTCOREGEN LE 37 $SHMEM_ALLOC $FLASHIMAGE $MSS_CORE $BSS_CORE $DSS_CORE

# generate and fill in the CRC for the multicore images
echo $CRC_MULTI $FLASHIMAGE $TEMP_FILE
$CRC_MULTI $FLASHIMAGE $TEMP_FILE
rm -rf $TEMP_FILE

# append crc to the flash image
$GEN_BINCRC32 $FLASHIMAGE

